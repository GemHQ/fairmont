// Generated by CoffeeScript 1.9.3
(function() {
  var $, include, type,
    slice = [].slice;

  $ = {};

  type = require("./type");

  $.include = include = function() {
    var i, key, len, mixin, mixins, object, value;
    object = arguments[0], mixins = 2 <= arguments.length ? slice.call(arguments, 1) : [];
    for (i = 0, len = mixins.length; i < len; i++) {
      mixin = mixins[i];
      for (key in mixin) {
        value = mixin[key];
        object[key] = value;
      }
    }
    return object;
  };

  $.Property = {
    property: (function() {
      var defaults;
      defaults = {
        enumerable: true,
        configurable: true
      };
      return function(properties) {
        var key, results, value;
        results = [];
        for (key in properties) {
          value = properties[key];
          include(value, defaults);
          results.push(Object.defineProperty(this.prototype, key, value));
        }
        return results;
      };
    })()
  };

  $.delegate = function(from, to) {
    var name, results, value;
    results = [];
    for (name in to) {
      value = to[name];
      if ((type(value)) === "function") {
        results.push((function(value) {
          return from[name] = function() {
            var args;
            args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
            return value.call.apply(value, [to].concat(slice.call(args)));
          };
        })(value));
      }
    }
    return results;
  };

  $.merge = function() {
    var destination, i, k, len, object, objects, v;
    objects = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    destination = {};
    for (i = 0, len = objects.length; i < len; i++) {
      object = objects[i];
      for (k in object) {
        v = object[k];
        destination[k] = v;
      }
    }
    return destination;
  };

  $.clone = function(object) {
    var clone, flags, key;
    if ((object == null) || typeof object !== 'object') {
      return object;
    }
    if (object instanceof Date) {
      return new Date(obj.getTime());
    }
    if (object instanceof RegExp) {
      flags = '';
      if (object.global != null) {
        flags += 'g';
      }
      if (object.ignoreCase != null) {
        flags += 'i';
      }
      if (object.multiline != null) {
        flags += 'm';
      }
      if (object.sticky != null) {
        flags += 'y';
      }
      return new RegExp(object.source, flags);
    }
    clone = new object.constructor();
    for (key in object) {
      clone[key] = $.clone(object[key]);
    }
    return clone;
  };

  module.exports = $;

}).call(this);
