# Example: Reactive File Watcher

This example build on the previous examples of an echo server and `hello world` web server.
In this example, we're going to generate `change` events from watching a set of files, listen for those events, and run our tests whenever we get one.
We'll also throttle the events so we don't run the tests unnecessarily.

We need a couple of things from the Node APIs so we can watch the files.

    {join} = require "path"
    fs = require "fs"

We also need to pick up some functions from Fairmont.

    {each, start, flow, events, throttle,
      map, shell, lsR} = require "../src/index"

This is the directory that contains the files we're watching. In real life, we'd probably get this from the command line or a configuration file.

    src = join __dirname, "..", "src"

We're ready now to define the function that will watch the files and run our tests when any of them change. To define it, we're going to curry `each` with a function that takes a single pathname. We'll define a flow based on that pathname.

    watch = each (path) ->

As always, we use `start` to run the iterator function returned by `flow`.

      start flow [

We'll initialize our flow with events generated by watching the file corresponding to the given path.

        events "change", fs.watch path

Node's FSWatcher sometimes generates duplicate events.
We also don't really need to keep running tests if we're making a bunch of changes in rapid succession.
So we `throttle` the events to ignore events that occurr within 5 seconds of the last event we processed.

        throttle 5000

We get two arguments from the events.
These are passed in as an array.
We'll log that we got an event and then run `npm test`.

        map ([event, file]) ->
          console.log "Detected change in #{file}"
          shell "npm test"

We watch the whole tree, and log the output to standard out.

        map (s) -> console.log s.stdout
      ]

    watch lsR src

